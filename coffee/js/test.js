// Generated by CoffeeScript 1.3.3
(function() {
  var Animal, Horse, Snake, sam, tom,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var demoTask, fill, food, foods, name, numbers, shortNames, test, _i, _len, _ref;
    demoTask = function(start, end) {
      return end - start;
    };
    foods = ['broccoli', 'spinach', 'chocolate'];
    for (_i = 0, _len = foods.length; _i < _len; _i++) {
      food = foods[_i];
      if (food !== 'chocolate') {
        eat(food);
      }
    }
    test = function(x) {
      return x * 2;
    };
    fill = function(container, liquid) {
      if (liquid == null) {
        liquid = "coffee";
      }
      return "Filling the " + container + " with " + liquid + "...";
    };
    shortNames = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
        name = list[_j];
        if (name.length < 5) {
          _results.push(name);
        }
      }
      return _results;
    })();
    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    [].splice.apply(numbers, [3, 4].concat(_ref = [-3, -4, -5, -6])), _ref;
    return window.like({
      ss: "nihak"
    });
  });

  Animal = (function() {

    function Animal(name) {
      this.name = name;
    }

    Animal.prototype.move = function(meters) {
      return alert(this.name + (" moved " + meters + "m."));
    };

    return Animal;

  })();

  Snake = (function(_super) {

    __extends(Snake, _super);

    function Snake() {
      return Snake.__super__.constructor.apply(this, arguments);
    }

    Snake.prototype.move = function() {
      alert("Slithering...");
      return Snake.__super__.move.call(this, 5);
    };

    return Snake;

  })(Animal);

  Horse = (function(_super) {

    __extends(Horse, _super);

    function Horse() {
      return Horse.__super__.constructor.apply(this, arguments);
    }

    Horse.prototype.move = function() {
      alert("Galloping...");
      return Horse.__super__.move.call(this, 45);
    };

    return Horse;

  })(Animal);

  sam = new Snake("Sammy the Python");

  tom = new Horse("Tommy the Palomino");

  sam.move();

  tom.move();

}).call(this);
